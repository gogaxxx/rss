#!/usr/bin/perl

use strict;
use warnings;

use Agg::Config;
use Agg::Download;
use Digest::MD5 qw(md5_hex);
use Encode;
use XML::Parser;

our $type;
our $name;
my @stack;

MAIN: {
	$|=1;

    unless (@ARGV) {
        die("Specify one or more urls\n");
    }

	my $cfg = Agg::Config->get_global_config();
	my $root = $cfg->{config_dir};
	my $parser = XML::Parser->new();
	my $loader = Agg::Download->new($cfg);

	for my $url (@ARGV) {
		print("Add $url ...");

		my ($config, $cache, $dir);
		eval {
			$dir = md5_hex($url);
			mkdir($root.'/'.$dir) || die("Can't create dir $dir: $!");

			$config = $root.'/'.$dir.'/config';
			$cache  = $root.'/'.$dir.'/cache';

			my $content = $loader->mirror($url, $cache);

			$parser->setHandlers(
				Start => \&xml_start_detect,
				End		=> \&xml_end);
			@stack = ();
			undef $type;
			undef $name;

			$parser->parse($content);

			open (CFG, '>'.$config)
				|| die("Can't open config file $config: $!");
			if (defined ($name) && length($name) > 0) {
				print CFG Encode::encode($cfg->{'encoding'},
					"name=$name\n");
			}
			print CFG "url=$url\n";
			print CFG "type=$type\n";
			close CFG;

			print "success\n";
		};
		if ($@) {
			unlink($config);
			unlink($cache);
			rmdir($dir);
			print "FAIL: $@\n";
		}
	}
}

#+++1 xml_start_detect
sub xml_start_detect {
    my ($expat, $elem)=@_;

	push @stack, $elem;
    if ($elem eq 'feed') {
        $type = 'atom';
		$expat->setHandlers(
			Start => \&xml_start,
			Char => \&atom_char);
    }
    elsif ($elem eq 'rss'
            || lc($elem) eq 'rdf:rdf')
    {
        $type = 'rss';
		$expat->setHandlers(
			Start => \&xml_start,
			Char => \&rss_char);
    }
    else {
        die'UNKNOWN TYPE '.$elem;
    }
}

sub xml_start {
    my ($expat, $elem)=@_;

	push @stack, $elem;
}

# xml_end_detect #+++1
sub xml_end {
	my ($expat, $elem)=@_;

	if ($elem ne $stack[-1]) {
		die("Bad xml: closing tag $elem should be $stack[-1]");
	}
	pop @stack; # just pop, do nothing
}

# rss_char #+++1
sub rss_char {
	my ($expat, $text)=@_;

	if ($stack[-1] eq 'title' && $stack[-2] eq 'channel') {
		$name = $text;
		$expat->finish();
	}
}

# atom_char #+++1
sub atom_char {
	my ($expat, $text)=@_;

	if ($stack[-1] eq 'title' && $stack[-2] eq 'feed') {
		$name = $text;
		$expat->finish();
	}
}
