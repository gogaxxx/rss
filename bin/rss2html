#!/usr/bin/perl
#
#
#

use strict;
use warnings;

use Agg::Config;
use Agg::Item;
use Agg::Transform;
use Date::Parse;
use Getopt::Std;
use POSIX qw(strftime);

use constant MAX_LINK_LEN => 60;

MAIN: {
	my %opts;

#pods#+++
=head2 OPTIONS

=over

=item -a

Load B<A>LL items in master index (by default load only new items)

=item -f <datetime>

B<f>rom time - load items older than specified date

=item -t <datetime>

B<t>o time - load items newer than specified date

=back

=cut
#---

	getopts('af:t:', \%opts);
	my $feed_id = $ARGV[0] || die("Specify feed id");

	my $cfg = Agg::Config->get_config_by_id($feed_id);

	my $from_time = get_from_time($opts{'f'});
	my $to_time   = get_to_time($opts{'t'});

	# грузим master
	my $index = 
		$opts{'a'}
			? $cfg->{'master'}
			: $cfg->{'news'};
	my @master = ();
	open(INDEX, '<'.$index) 
		|| die("Can't open ".$index.": $!");
	while (my $line = <INDEX>) {
		chomp $line;

		my @data = split(/\s+/o, $line, 3);

		if ($data[0] >= $from_time
			&& $data[0] <= $to_time)
		{
			push @master, \@data;
		}
	}
	close INDEX;

	my $outfile = $cfg->{'read-dir'}.'/'
		.$cfg->{'name'}
		.strftime('-%Y-%m-%d-%H%M%S', localtime())
		.'.html';

	if (@master) {
		# сортируем по времени
		@master = sort { $a->[0] <=> $b->[0] } @master;

		my $itemizer = Agg::Item->new($cfg);
		my $transform = Agg::Transform->new($cfg);

		my $enc = $cfg->{'encoding'};
		open(OUT, '>'.$outfile) || die("Can't open $outfile: $!");
		print OUT '<html><head><title>';
		print OUT Encode::encode($enc, $cfg->{name});
		print OUT '</title></head><body bgcolor=white>';
		
		for my $i (@master) {
			my $item = $itemizer->load_item($i->[1]);
			$transform->transform_item($item);

			my $display_link = length($item->{'link'}) > MAX_LINK_LEN
				? substr($item->{'link'}, 0, MAX_LINK_LEN).'...'
				: $item->{'link'};
			my $link_code =
				'<span class=link> Link:'
				.q{<a href="}.$item->{'link'}.q{">}.$display_link.q{</a></span><br>};

			print OUT Encode::encode($enc, '<h1>'.$item->{subject}.'<br></h1>');
			print OUT 
				'<span class=date>['
				. strftime($cfg->{'date-format'}, localtime($item->{'time'}))
				. ']</span><br>';
			print OUT $link_code;
			print OUT Encode::encode($enc, '<div class=body>'.$item->{body}.'</div>');
			print OUT $link_code;
			print OUT "<hr>\n";
		}
		print OUT '</body></html>';
		close OUT;
	}
}

### get_from_time ####### #+++1
sub get_from_time {
	return _get_time(shift) // 0;
}

### get_to_time ####### #+++1
sub get_to_time {
	return _get_time(shift) // time();
}

### _get_time ####### #+++1
sub _get_time {
	my $raw = shift;

	my $time;
	if (defined($raw) && length($raw)>0) {
		$time = str2time($raw);
		unless (defined($time)) {
			warn "failed to parse $raw as date-time, using default";
		}
	}
	return $time;
}
