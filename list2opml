#!/usr/bin/perl
#
#
#

use strict;

use LWP::UserAgent;
use POSIX qw(strftime);
use XML::Parser;
use utf8;

my @weekdays = qw(
Sun
Mon Tue Wed Thu Fri Sat  
);

my @months = qw(
Jan    Feb   Mar    Apr
May    Jun   Jul    Aug
Sep    Oct   Nov    Dec
);

MAIN: {
	binmode STDOUT, ':utf8';
	my $in_file = $ARGV[0];

	open(IN, $in_file) || die("Can't open $in_file: $!");

	print '<opml>';

	my @lt = localtime();
	print '<head>';
	print '<dateCreated>',
			sprintf('%s, %d %s %.4d %.2d:%.2d:%.2d',
					$weekdays[$lt[6]], 
					$lt[3],
					$months[$lt[4]],
					$lt[5]+1900,
					$lt[2], $lt[1], $lt[0]),
			'</dateCreated>';
	print '</head>';

	print '<body>';

	my $ua = LWP::UserAgent->new();
	my $parser = XML::Parser->new();
	$parser->{self}=$parser;
	$ua->env_proxy();

	while (my $url = <IN>) {
		chomp $url;

		my $response = $ua->get($url);
		my ($text, $type);
		if ($response->is_success) {
			$parser->{in_entry} = 0;
        	$parser->setHandlers(Start => \&xml_start_detect);

			$parser->parse(
				$response->decoded_content 
				|| $response->content);

			$text = $parser->{title};
			$type = $parser->{type};
		}
		else {
			warn ("Can't get $url: ", $response->status_line);
			$text = $url;
		}

		print('<outline',
				($type ? ' type="'.$type.'"' : ''),
				' text="', $text, '"',
			 	' xmlUrl="', $url, '"/>', "\n");
	}
	print '</body>';
	print '</opml>';

	close IN;
}

# handlers #+++1
# xml_start_detect #+++2
sub xml_start_detect {
    my ($expat, $elem)=@_;

    if ($elem eq 'feed') {
        $expat->{self}{type} = 'atom';
        $expat->setHandlers(Start => \&atom_start,
                            End   => \&atom_end,
                            Char  => \&common_char);
    }
    elsif ($elem eq 'rss'
            || lc($elem) eq 'rdf:rdf')
    {
        $expat->{self}{type} = 'rss';
        $expat->setHandlers(Start => \&rss_start,
                            End   => \&rss_end,
                            Char  => \&common_char);
    }
    else {
        print 'UNKNOWN TYPE ';
        $expat->finish();
    }
}

### atom_start ####### #+++2
sub atom_start {
    my ($expat, $elem, %attr)=@_;

    if ($elem eq 'title') {
		$expat->{self}{in_title} = 1;
		$expat->{self}{title} = '';
    }
	elsif ($elem eq 'entry') {
		$expat->finish();
	}
}

#+++2 atom_end 
sub atom_end {
    my ($expat, $elem)=@_;

	if ($elem eq 'title'
		&& $expat->{self}{in_title}) 
	{
		$expat->finish();
	}
}

### rss_start ####### #+++2
sub rss_start {
    my ($expat, $elem, %attr)=@_;

    if ($elem eq 'title') {
		$expat->{self}{in_title} = 1;
		$expat->{self}{title} = '';
    }
	elsif ($elem eq 'item'
			|| $elem eq 'items') {
		$expat->finish();
	}
}

#+++2 rss_end 
sub rss_end {
    my ($expat, $elem)=@_;

	if ($elem eq 'title'
		&& $expat->{self}{in_title}) 
	{
		$expat->finish();
	}
}

#+++2 common_char
sub common_char {
    my ($expat, $string)=@_;

    if ($expat->{self}{in_title}) {
        $expat->{self}{title} .= $string;
    }
}
